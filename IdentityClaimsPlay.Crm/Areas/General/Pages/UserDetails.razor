@using IdentityClaimsPlay.Crm.Data
@using IdentityClaimsPlay.Crm.Helpers
@attribute [Route(RouteHelper.UserDetailsId)]

@if (_loaded) {
  if (Id == "new" || !string.IsNullOrWhiteSpace(_model.Email)) {
    @if (Id == "new") {
      <h1>New user</h1>
    } else {
      <h1>User details for: @_model.Email</h1>
    }

    <p>Roles: @_roles.Select(r=>r.Name).JoinStr()</p>

    <EditForm Model="@_model">
      @if (Id == "new") {
        <h3>Email: <TelerikTextBox @bind-Value="_model.Email" Width="300px" /></h3>
      }
      @* TODO AYS - Replace this with a dropdown that binds to a Roles enum value *@
      <h3>
        Role:
        <TelerikDropDownList Data="@_roles"
                             @bind-Value="@_model.Role"
                             TextField="Name"
                             ValueField="Value"
                             Width="300px" />
      </h3>
      @if (UserHelper.Role == Roles.Admin && _model.Role != Roles.Admin) {
        <h3>
          Company:
          <TelerikDropDownList Data="@_companies"
                               @bind-Value="@_model.CompanyId"
                               TextField="Name"
                               ValueField="Value"
                               Width="300px" />
        </h3>
      }
      @if (_model.Role == Roles.CardIssuerUser) {
        <h3>Permissions</h3>
        <p>Note that (at the moment at least) it is up to you to make sure you don't give a user permission to edit something that they can't see! It would be nice if we could make it so that granting edit permission automatically granted view permission, and revoking view permission automatically revoked edit permission, but I haven't thought of a way of doing that yet.</p>
        <ul style="list-style-type: none">
          @foreach (PermissionDto permission in _model.Permissions) {
            <li><TelerikCheckBox @bind-Value="@permission.HasPermission" Id="@permission.Value" /> <label for="@permission.Value">@permission.Value</label></li>
          }
        </ul>
      }
      <TelerikButton Rounded="@(ThemeConstants.Button.Rounded.Large)"
                     ButtonType="@ButtonType.Submit"
                     ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                     OnClick="Save">
        <span class="@IconsHelper.Save me-1"></span> Save
      </TelerikButton>
    </EditForm>
  } else {
    <h1>User not found</h1>
    <p>Big flop, can't find that user</p>
  }
} else {
  <h1>Loading...</h1>
}