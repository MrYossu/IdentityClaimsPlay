@attribute [Route(RouteHelper.ChangePassword)]
@attribute [Authorize]
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1><span class="@IconsHelper.UserAlt" aria-hidden="true"></span> @(!_changed ? "Change your password" : "Password changed successfully")</h1>
<div class="row">
  <div class="col-md-6">
    <section>
      <hr />
      <Conditional IfTrue="!_changed">
        <If>
          <EditForm Model="@vm" OnValidSubmit="@OnSubmitPassword">
            <FluentValidationValidator />
            <TelerikFloatingLabel Text="New password" Class="w-100 mb-1">
              <TelerikTextBox @bind-Value="@vm.Password1" Password="true" />
              <ValidationMessage For="() => vm.Password1" />
            </TelerikFloatingLabel>

            <TelerikFloatingLabel Text="And again" Class="w-100 mb-1">
              <TelerikTextBox @bind-Value="@vm.Password2" Password="true" />
              <ValidationMessage For="() => vm.Password2" />
            </TelerikFloatingLabel>

            <SubmitButton Caption="Change" Icon="@IconsHelper.Save" />

          </EditForm>

          <Conditional IfTrue="!string.IsNullOrWhiteSpace(_errors)">
            <If>
              <HtmlRaw Html="@_errors" />
            </If>
          </Conditional>
        </If>
        <Else>
          <p>Great news, your password has been changed.</p>
          <p>You are still logged in, but next time you log out, you'll need your new password to log in again.</p>
        </Else>
      </Conditional>
    </section>
  </div>
</div>

@code {

  private readonly ChangePasswordViewModel vm = new();
  private string _errors = "";
  private bool _changed;

  public async Task OnSubmitPassword() {
    User user = await UserManager.GetUserAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User) ?? new();
    string token = await UserManager.GeneratePasswordResetTokenAsync(user);
    IdentityResult result = await UserManager.ResetPasswordAsync(user, token, vm.Password1);
    if (result.Errors.Any()) {
      _errors = $"<h3 class=\"mt-2 text-danger\">Your password was not changed:</h3><ul>{result.Errors.Select(e => "<li>" + e.Description + "</li>").JoinStr("")}</ul>";
    } else {
      _changed = true;
    }
  }

  public class ChangePasswordViewModel {
    public string Password1 { get; set; } = "";
    public string Password2 { get; set; } = "";
  }


}