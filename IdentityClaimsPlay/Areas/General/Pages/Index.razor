@attribute [Route(RouteHelper.Home)]

<PageTitle>Identity Claims Play</PageTitle>

<h1>Identity Claims Play</h1>
<p>See <a href="https://github.com/MrYossu/IdentityClaimsPlay" target="_blank">the project page</a> for more details of what's going on here</p>

<h2>Your details</h2>
@if (_me.Identity?.IsAuthenticated ?? false) {
  <p>You are logged in as <code>@_me.Identity?.Name</code>, and have the role <code>@Role.SplitCamelCase()</code></p>
  @if (Role == ClaimsHelper.UserRoleCardIssuerUser) {
    <p>You have the following permission(s)...</p>
    <ul>
      @foreach (var claim in _me.Claims.Where(c => c.Type == ClaimsHelper.UserPermission)) {
        <li>@claim.Value.SplitCamelCase()</li>
      }
    </ul>
  }
} else {
  <p>You are not logged in. Try logging in as one of the following users, all of whom have a password of <code>1</code>...</p>
  <ul style="list-style-type: none">
    <li><code>admin@a.com</code> - global admin user</li>
    <li><code>companyadmin@a.com</code> - admin company user</li>
    <li><code>flunky1@a.com</code> and <code>flunky2@a.com</code> - both regular company users</li>
  </ul>
}

<h2>Access restrictions</h2>
<p>These are the intentions, not all permissions (and indeed not all pages) may be implemented yet.</p>
<dl>
  <dt>Home page</dt>
  <dd>Anyone can access</dd>
  <dt>Company list</dt>
  <dd>Only global admin can access</dd>
  <dt>User list and details</dt>
  <dd>Only global and company admins can access. Company admins can only see users for their company</dd>
  <dt>Charity list and details</dt>
  <dd>All admins, and flunkies with charity permissions can view. Only flunkies with edit charity permissions can edit</dd>
  <dt>TODO - Donor list and details</dt>
  <dd>All admins, and flunkies with donor permissions can view. Only flunkies with edit donor permissions can edit</dd>
</dl>

<h2>Things to do</h2>
<ul>
  <li>Store the company Id in a claim, to avoid having to hit the database when we want it</li>
  <li>Show a list of all users on the home page</li>
  <li>Split the roles and permissions. Have each as an enum rather than strings</li>
  <li>Build a <code>UserHelper</code> class that abstracts away all the nitty-gritty code of getting roles and permissions. That way the individual pages don't need to repeat the same code</li>
  <li>Check if we can set a policy attribute that references multiple claims. If not, we'll need to work out how to handle dit/view permissions</li>
</ul>